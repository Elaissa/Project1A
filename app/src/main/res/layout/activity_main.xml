
/**
    +     * This listener gets triggered when the {@link MediaPlayer} has completed
    +     * playing the audio file.
    +     */
    +    private MediaPlayer.OnCompletionListener mCompletionListener = new MediaPlayer.OnCompletionListener() {
    +        @Override
    +        public void onCompletion(MediaPlayer mediaPlayer) {
    +            // Now that the sound file has finished playing, release the media player resources.
    +            releaseMediaPlayer();
    +        }
    +    };
    +
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    @@ -64,6 +76,10 @@ protected void onCreate(Bundle savedInstanceState) {
    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
    +                // Release the media player if it currently exists because we are about to
    +                // play a different sound file
    +                releaseMediaPlayer();
    +
    // Get the {@link Word} object at the given position the user clicked on
    Word word = words.get(position);

    @@ -73,7 +89,28 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon

    // Start the audio file
    mMediaPlayer.start();
    +
    +                // Setup a listener on the media player, so that we can stop and release the
    +                // media player once the sound has finished playing.
    +                mMediaPlayer.setOnCompletionListener(mCompletionListener);
    }
    });
    }
    +
    +    /**
    +     * Clean up the media player by releasing its resources.
    +     */
    +    private void releaseMediaPlayer() {
    +        // If the media player is not null, then it may be currently playing a sound.
    +        if (mMediaPlayer != null) {
    +            // Regardless of the current state of the media player, release its resources
    +            // because we no longer need it.
    +            mMediaPlayer.release();
    +
    +            // Set the media player back to null. For our code, we've decided that
    +            // setting the media player to null is an easy way to tell that the media player
    +            // is not configured to play an audio file at the moment.
    +            mMediaPlayer = null;
    +        }
    +    }
    }
    View
    37  app/src/main/java/com/example/android/miwok/FamilyActivity.java
    @@ -29,6 +29,18 @@
    /** Handles playback of all the sound files */
    private MediaPlayer mMediaPlayer;

    +    /**
    +     * This listener gets triggered when the {@link MediaPlayer} has completed
    +     * playing the audio file.
    +     */
    +    private MediaPlayer.OnCompletionListener mCompletionListener = new MediaPlayer.OnCompletionListener() {
    +        @Override
    +        public void onCompletion(MediaPlayer mediaPlayer) {
    +            // Now that the sound file has finished playing, release the media player resources.
    +            releaseMediaPlayer();
    +        }
    +    };
    +
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    @@ -70,6 +82,10 @@ protected void onCreate(Bundle savedInstanceState) {
    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
    +                // Release the media player if it currently exists because we are about to
    +                // play a different sound file
    +                releaseMediaPlayer();
    +
    // Get the {@link Word} object at the given position the user clicked on
    Word word = words.get(position);

    @@ -79,7 +95,28 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon

    // Start the audio file
    mMediaPlayer.start();
    +
    +                // Setup a listener on the media player, so that we can stop and release the
    +                // media player once the sound has finished playing.
    +                mMediaPlayer.setOnCompletionListener(mCompletionListener);
    }
    });
    }
    +
    +    /**
    +     * Clean up the media player by releasing its resources.
    +     */
    +    private void releaseMediaPlayer() {
    +        // If the media player is not null, then it may be currently playing a sound.
    +        if (mMediaPlayer != null) {
    +            // Regardless of the current state of the media player, release its resources
    +            // because we no longer need it.
    +            mMediaPlayer.release();
    +
    +            // Set the media player back to null. For our code, we've decided that
    +            // setting the media player to null is an easy way to tell that the media player
    +            // is not configured to play an audio file at the moment.
    +            mMediaPlayer = null;
    +        }
    +    }
    }
    View
    37  app/src/main/java/com/example/android/miwok/NumbersActivity.java
    @@ -29,6 +29,18 @@
    /** Handles playback of all the sound files */
    private MediaPlayer mMediaPlayer;

    +    /**
    +     * This listener gets triggered when the {@link MediaPlayer} has completed
    +     * playing the audio file.
    +     */
    +    private MediaPlayer.OnCompletionListener mCompletionListener = new MediaPlayer.OnCompletionListener() {
    +        @Override
    +        public void onCompletion(MediaPlayer mediaPlayer) {
    +            // Now that the sound file has finished playing, release the media player resources.
    +            releaseMediaPlayer();
    +        }
    +    };
    +
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    @@ -64,6 +76,10 @@ protected void onCreate(Bundle savedInstanceState) {
    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
    +                // Release the media player if it currently exists because we are about to
    +                // play a different sound file
    +                releaseMediaPlayer();
    +
    // Get the {@link Word} object at the given position the user clicked on
    Word word = words.get(position);

    @@ -73,7 +89,28 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon

    // Start the audio file
    mMediaPlayer.start();
    +
    +                // Setup a listener on the media player, so that we can stop and release the
    +                // media player once the sound has finished playing.
    +                mMediaPlayer.setOnCompletionListener(mCompletionListener);
    }
    });
    }
    +
    +    /**
    +     * Clean up the media player by releasing its resources.
    +     */
    +    private void releaseMediaPlayer() {
    +        // If the media player is not null, then it may be currently playing a sound.
    +        if (mMediaPlayer != null) {
    +            // Regardless of the current state of the media player, release its resources
    +            // because we no longer need it.
    +            mMediaPlayer.release();
    +
    +            // Set the media player back to null. For our code, we've decided that
    +            // setting the media player to null is an easy way to tell that the media player
    +            // is not configured to play an audio file at the moment.
    +            mMediaPlayer = null;
    +        }
    +    }
    }
    View
    37  app/src/main/java/com/example/android/miwok/PhrasesActivity.java
    @@ -29,6 +29,18 @@
    /** Handles playback of all the sound files */
    private MediaPlayer mMediaPlayer;

    +    /**
    +     * This listener gets triggered when the {@link MediaPlayer} has completed
    +     * playing the audio file.
    +     */
    +    private MediaPlayer.OnCompletionListener mCompletionListener = new MediaPlayer.OnCompletionListener() {
    +        @Override
    +        public void onCompletion(MediaPlayer mediaPlayer) {
    +            // Now that the sound file has finished playing, release the media player resources.
    +            releaseMediaPlayer();
    +        }
    +    };
    +
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    @@ -66,6 +78,10 @@ protected void onCreate(Bundle savedInstanceState) {
    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int position, long l) {
    +                // Release the media player if it currently exists because we are about to
    +                // play a different sound file
    +                releaseMediaPlayer();
    +
    // Get the {@link Word} object at the given position the user clicked on
    Word word = words.get(position);

    @@ -75,7 +91,28 @@ public void onItemClick(AdapterView<?> adapterView, View view, int position, lon

    // Start the audio file
    mMediaPlayer.start();
    +
    +                // Setup a listener on the media player, so that we can stop and release the
    +                // media player once the sound has finished playing.
    +                mMediaPlayer.setOnCompletionListener(mCompletionListener);
    }
    });
    }
    +
    +    /**
    +     * Clean up the media player by releasing its resources.
    +     */
    +    private void releaseMediaPlayer() {
    +        // If the media player is not null, then it may be currently playing a sound.
    +        if (mMediaPlayer != null) {
    +            // Regardless of the current state of the media player, release its resources
    +            // because we no longer need it.
    +            mMediaPlayer.release();
    +
    +            // Set the media player back to null. For our code, we've decided that
    +            // setting the media player to null is an easy way to tell that the media player
    +            // is not configured to play an audio file at the moment.
    +            mMediaPlayer = null;
    +        }
    +    }
    }
    6 comments on commit c2a89bc
    @himanshurawlani

    himanshurawlani commented on c2a89bc on 28 Dec 2016
    This is what i have done to initialize, start and clean up resources...

    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {

    @Override
    public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {

    Word listItem=words.get(i);
    Log.v("NumbersActivity","Current Word:"+words);
    mMediaPlayer = MediaPlayer.create(NumbersActivity.this, listItem.getAudioResource());
    mMediaPlayer.start();

    mMediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
    @Override
    public void onCompletion(MediaPlayer mp) {
    mp.stop();
    mp.release();
    mMediaPlayer=null;
    }
    });
    });
    The Log.v() Statement prints all the words in the ArrayList every time I click an item in the ListView.
    Though the audio output on the device is proper, but I really have no clue why is it looping through all the words in the ArrayList. Also a particular activity plays at most 6-7 times after that there is no audio output on the device.
    @Mahmoud-fci

    Mahmoud-fci replied on 10 Mar • edited
    public class FamilyActivity extends AppCompatActivity {

    private MediaPlayer mediaPlayer;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.word_list);

    // Create a list of words
    ArrayList<Word> words = new ArrayList<Word>();
    words.add(new Word("father", "әpә", R.drawable.family_father));
    words.add(new Word("mother", "әṭa", R.drawable.family_mother));
    words.add(new Word("son", "angsi", R.drawable.family_son));
    words.add(new Word("daughter", "tune", R.drawable.family_daughter));
    words.add(new Word("older brother", "taachi", R.drawable.family_older_brother));
    words.add(new Word("younger brother", "chalitti", R.drawable.family_younger_brother));
    words.add(new Word("older sister", "teṭe", R.drawable.family_older_sister));
    words.add(new Word("younger sister", "kolliti", R.drawable.family_younger_sister));
    words.add(new Word("grandmother ", "ama", R.drawable.family_grandmother));
    words.add(new Word("grandfather", "paapa", R.drawable.family_grandfather));

    WordAdapter adapter = new WordAdapter(this, words, R.color.category_family);

    ListView listView = (ListView) findViewById(R.id.list);
    listView.setAdapter(adapter);

    listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView<?> parent, View view, int postion, long id) {

    if(postion==0){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_father);
    }else if(postion==1){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_mother);
    }else if(postion==2){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_son);
    }else if(postion==3){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_daughter);
    }else if(postion==4){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_older_brother);
    }else if(postion==5){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_younger_brother);
    }else if(postion==6){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_older_sister);
    }else if(postion==7){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_younger_sister);
    }else if(postion==8){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_grandmother);
    }else if(postion==9){
    mediaPlayer = MediaPlayer.create(FamilyActivity.this , R.raw.family_grandfather);
    }
    mediaPlayer.start();

    mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
    @Override
    public void onCompletion(MediaPlayer mp) {
    mp.stop();
    mp.release();
    mediaPlayer = null;
    }
    });
    }
    });

    }
    }